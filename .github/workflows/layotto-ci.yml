name: Layotto Go SDK Dev Pipeline ðŸŒŠ

# Ignore some changes of commits:
# 1. changes in .ci/
# 2. changes in docs/
# 3. changes in markdown files

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: "*"
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

jobs:
  style-check:
    name: "Go Style Check"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.18.10
      - name: Format Go
        run: |
           make workspace
  resolve-modules:
    name: "Resolve Go Modules"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
      - id: set-matrix
        run: |
          echo "Resolving modules in $(pwd)"
          PATHS=$(find . -not -path "*/faas/*" -type f -name go.mod -printf '{"workdir":"%h"},')
          echo "::set-output name=matrix::{\"include\":[${PATHS%?}]}"
  golangci-lint:
    name: "Go CI Linter"
    needs: [style-check,resolve-modules]
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJson(needs.resolve-modules.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.18.10
    - name: Go Lint Test
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.46.2
        working-directory: ${{ matrix.workdir }}
        args: "--out-${NO_FUTURE}format colored-line-number"

  go-unit-test:
    name: "Go Unit Test"
    needs: [style-check]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.18.10
    - name: Go Unit Test
      run: make test

  coverage:
    name: "Coverage Analysis"
    needs: [go-unit-test,golangci-lint,style-check]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Test Coverage
      run: make coverage
    - name: Post Coverage
      run: bash <(curl -s https://codecov.io/bash)